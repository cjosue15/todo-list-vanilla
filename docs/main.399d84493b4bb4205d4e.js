(function(a){function b(d){if(c[d])return c[d].exports;var e=c[d]={i:d,l:!1,exports:{}};return a[d].call(e.exports,e,e.exports,b),e.l=!0,e.exports}var c={};return b.m=a,b.c=c,b.d=function(a,c,d){b.o(a,c)||Object.defineProperty(a,c,{enumerable:!0,get:d})},b.r=function(a){'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(a,Symbol.toStringTag,{value:'Module'}),Object.defineProperty(a,'__esModule',{value:!0})},b.t=function(a,c){if(1&c&&(a=b(a)),8&c)return a;if(4&c&&'object'==typeof a&&a&&a.__esModule)return a;var d=Object.create(null);if(b.r(d),Object.defineProperty(d,'default',{enumerable:!0,value:a}),2&c&&'string'!=typeof a)for(var e in a)b.d(d,e,function(b){return a[b]}.bind(null,e));return d},b.n=function(a){var c=a&&a.__esModule?function(){return a['default']}:function(){return a};return b.d(c,'a',c),c},b.o=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)},b.p='',b(b.s=1)})([function(){},function(a,b,c){'use strict';function d(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}function e(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,'value'in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function f(a,b,c){return b&&e(a.prototype,b),c&&e(a,c),a}function g(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}function h(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,'value'in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function i(a,b,c){return b&&h(a.prototype,b),c&&h(a,c),a}function j(a,b){var c;if('undefined'==typeof Symbol||null==a[Symbol.iterator]){if(Array.isArray(a)||(c=k(a))||b&&a&&'number'==typeof a.length){c&&(a=c);var d=0,e=function(){};return{s:e,n:function(){return d>=a.length?{done:!0}:{done:!1,value:a[d++]}},e:function(a){throw a},f:e}}throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.')}var f,g=!0,h=!1;return{s:function(){c=a[Symbol.iterator]()},n:function(){var a=c.next();return g=a.done,a},e:function(a){h=!0,f=a},f:function(){try{g||null==c['return']||c['return']()}finally{if(h)throw f}}}}function k(a,b){if(a){if('string'==typeof a)return l(a,b);var c=Object.prototype.toString.call(a).slice(8,-1);return'Object'===c&&a.constructor&&(c=a.constructor.name),'Map'===c||'Set'===c?Array.from(a):'Arguments'===c||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)?l(a,b):void 0}}function l(a,b){(null==b||b>a.length)&&(b=a.length);for(var c=0,d=Array(b);c<b;c++)d[c]=a[c];return d}c.r(b),c.d(b,'todoList',function(){return x});var m=c(0),n=function(){function a(b){d(this,a),this.tarea=b,this.id=new Date().getTime(),this.done=!1,this.created=new Date}return f(a,null,[{key:'fromJson',value:function(b){var c=b.id,d=b.tarea,e=b.done,f=b.created,g=new a(d);return g.id=c,g.done=e,g.created=f,g}}]),a}(),o=function(){function a(){g(this,a),this.loadLocalStorage()}return i(a,[{key:'addTodo',value:function(a){this.todos.push(a),this.saveLocalStorage()}},{key:'removeTodo',value:function(a){var b=this.todos.findIndex(function(b){return b.id===a});this.todos.splice(b,1),this.saveLocalStorage()}},{key:'changeDoneTodo',value:function(a){var b=this.todos.find(function(b){return b.id===a});b.done=!b.done,this.saveLocalStorage()}},{key:'removeCompleted',value:function(){this.todos=this.todos.filter(function(a){return!a.done}),this.saveLocalStorage()}},{key:'saveLocalStorage',value:function(){localStorage.setItem('todos',JSON.stringify(this.todos))}},{key:'loadLocalStorage',value:function(){this.todos=localStorage.getItem('todos')?JSON.parse(localStorage.getItem('todos')):[],0<this.todos.length&&(this.todos=this.todos.map(function(a){return n.fromJson(a)}))}}]),a}(),p=document.querySelector('.todo-list'),q=document.querySelector('.new-todo'),r=document.querySelector('.clear-completed'),s=document.querySelector('.filters'),t=document.querySelectorAll('.filters a'),u=document.querySelector('.todo-count strong'),v=function(a){var b='\n    <li class="'.concat(a.done?'completed':'','" data-id="').concat(a.id,'">\n        <div class="view">\n            <input class="toggle" type="checkbox" ').concat(a.done?'checked':'','>\n            <label>').concat(a.tarea,'</label>\n            <button class="destroy"></button>\n        </div>\n        <input class="edit" value="Create a TodoMVC template">\n    </li>'),c=document.createElement('div');c.innerHTML=b,p.appendChild(c.firstElementChild)};q.addEventListener('keyup',function(a){var b=a.keyCode,c=a.target.value;if(13===b&&0<c.length){var d=new n(c);x.addTodo(d),v(d),q.value='',w()}}),p.addEventListener('click',function(a){var b=a.target.localName,c=a.target.parentElement.parentElement,d=+c.getAttribute('data-id');'input'===b?(x.changeDoneTodo(d),c.classList.toggle('completed'),w()):'button'===b&&(x.removeTodo(d),c.remove(),w())}),r.addEventListener('click',function(){x.removeCompleted(),w();for(var a,b=p.children.length-1;0<=b;b--)a=p.children[b],a.classList.contains('completed')&&a.remove()}),s.addEventListener('click',function(a){var b=a.target.text;if(b){t.forEach(function(a){return a.classList.remove('selected')});var c=a.target;c.classList.add('selected');var d,e=j(p.children);try{for(e.s();!(d=e.n()).done;){var f=d.value;f.classList.remove('hidden');var g=f.classList.contains('completed');switch(b){case'Pendientes':g&&f.classList.add('hidden');break;case'Completados':g||f.classList.add('hidden');break;default:}}}catch(a){e.e(a)}finally{e.f()}}});var w=function(){var a=x.todos.filter(function(a){return!a.done});u.innerHTML=a.length},x=new o;w(),x.todos&&0<x.todos.length&&x.todos.forEach(function(a){return v(a)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,