(function(a){function b(d){if(c[d])return c[d].exports;var e=c[d]={i:d,l:!1,exports:{}};return a[d].call(e.exports,e,e.exports,b),e.l=!0,e.exports}var c={};return b.m=a,b.c=c,b.d=function(a,c,d){b.o(a,c)||Object.defineProperty(a,c,{enumerable:!0,get:d})},b.r=function(a){'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(a,Symbol.toStringTag,{value:'Module'}),Object.defineProperty(a,'__esModule',{value:!0})},b.t=function(a,c){if(1&c&&(a=b(a)),8&c)return a;if(4&c&&'object'==typeof a&&a&&a.__esModule)return a;var d=Object.create(null);if(b.r(d),Object.defineProperty(d,'default',{enumerable:!0,value:a}),2&c&&'string'!=typeof a)for(var e in a)b.d(d,e,function(b){return a[b]}.bind(null,e));return d},b.n=function(a){var c=a&&a.__esModule?function(){return a['default']}:function(){return a};return b.d(c,'a',c),c},b.o=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)},b.p='',b(b.s=1)})([function(){},function(a,b,c){'use strict';function d(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}function e(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,'value'in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function f(a,b,c){return b&&e(a.prototype,b),c&&e(a,c),a}function g(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}function h(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,'value'in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function i(a,b,c){return b&&h(a.prototype,b),c&&h(a,c),a}function j(a,b){var c;if('undefined'==typeof Symbol||null==a[Symbol.iterator]){if(Array.isArray(a)||(c=k(a))||b&&a&&'number'==typeof a.length){c&&(a=c);var d=0,e=function(){};return{s:e,n:function(){return d>=a.length?{done:!0}:{done:!1,value:a[d++]}},e:function(a){throw a},f:e}}throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.')}var f,g=!0,h=!1;return{s:function(){c=a[Symbol.iterator]()},n:function(){var a=c.next();return g=a.done,a},e:function(a){h=!0,f=a},f:function(){try{g||null==c['return']||c['return']()}finally{if(h)throw f}}}}function k(a,b){if(a){if('string'==typeof a)return l(a,b);var c=Object.prototype.toString.call(a).slice(8,-1);return'Object'===c&&a.constructor&&(c=a.constructor.name),'Map'===c||'Set'===c?Array.from(a):'Arguments'===c||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)?l(a,b):void 0}}function l(a,b){(null==b||b>a.length)&&(b=a.length);for(var c=0,d=Array(b);c<b;c++)d[c]=a[c];return d}c.r(b),c.d(b,'todoList',function(){return v});var m=c(0),n=function(){function a(b){d(this,a),this.tarea=b,this.id=new Date().getTime(),this.done=!1,this.created=new Date}return f(a,null,[{key:'fromJson',value:function(b){var c=b.id,d=b.tarea,e=b.done,f=b.created,g=new a(d);return g.id=c,g.done=e,g.created=f,g}}]),a}(),o=function(){function a(){g(this,a),this.loadLocalStorage()}return i(a,[{key:'addTodo',value:function(a){this.todos.push(a),this.saveLocalStorage()}},{key:'removeTodo',value:function(a){var b=this.todos.findIndex(function(b){return b.id===a});this.todos.splice(b,1),this.saveLocalStorage()}},{key:'changeDoneTodo',value:function(a){var b=this.todos.find(function(b){return b.id===a});b.done=!b.done,this.saveLocalStorage()}},{key:'removeCompleted',value:function(){this.todos=this.todos.filter(function(a){return!a.done}),this.saveLocalStorage()}},{key:'saveLocalStorage',value:function(){localStorage.setItem('todos',JSON.stringify(this.todos))}},{key:'loadLocalStorage',value:function(){this.todos=localStorage.getItem('todos')?JSON.parse(localStorage.getItem('todos')):[],0<this.todos.length&&(this.todos=this.todos.map(function(a){return n.fromJson(a)}))}}]),a}(),p=document.querySelector('.todo-list'),q=document.querySelector('.new-todo'),r=document.querySelector('.clear-completed'),s=document.querySelector('.filters'),t=document.querySelectorAll('.filters a'),u=function(a){var b='\n    <li class="'.concat(a.done?'completed':'','" data-id="').concat(a.id,'">\n        <div class="view">\n            <input class="toggle" type="checkbox" ').concat(a.done?'checked':'','>\n            <label>').concat(a.tarea,'</label>\n            <button class="destroy"></button>\n        </div>\n        <input class="edit" value="Create a TodoMVC template">\n    </li>'),c=document.createElement('div');c.innerHTML=b,p.appendChild(c.firstElementChild)};q.addEventListener('keyup',function(a){var b=a.keyCode,c=a.target.value;if(13===b&&0<c.length){var d=new n(c);v.addTodo(d),u(d),q.value=''}}),p.addEventListener('click',function(a){var b=a.target.localName,c=a.target.parentElement.parentElement,d=+c.getAttribute('data-id');'input'===b?(v.changeDoneTodo(d),c.classList.toggle('completed')):'button'===b&&(v.removeTodo(d),c.remove())}),r.addEventListener('click',function(){v.removeCompleted();for(var a,b=p.children.length-1;0<=b;b--)a=p.children[b],a.classList.contains('completed')&&a.remove()}),s.addEventListener('click',function(a){var b=a.target.text;if(b){t.forEach(function(a){return a.classList.remove('selected')});var c=a.target;c.classList.add('selected');var d,e=j(p.children);try{for(e.s();!(d=e.n()).done;){var f=d.value;f.classList.remove('hidden');var g=f.classList.contains('completed');switch(b){case'Pendientes':g&&f.classList.add('hidden');break;case'Completados':g||f.classList.add('hidden');break;default:}}}catch(a){e.e(a)}finally{e.f()}}});var v=new o;v.todos&&0<v.todos.length&&v.todos.forEach(function(a){return u(a)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NsYXNzZXMvdG9kby5jbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2xhc3Nlcy90b2RvLWxpc3QuY2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImlkIiwidGFyZWEiLCJkb25lIiwiY3JlYXRlZCIsInRlbXBUb2RvIiwiaW5kZXgiLCJ0b2RvIiwiaXRlbSIsImxvY2FsU3RvcmFnZSIsIkpTT04iLCJUb2RvIiwiJHRvZG9MaXN0IiwiZG9jdW1lbnQiLCIkbmV3SW5wdXQiLCIkY2xlYXJDb21wbGV0ZWQiLCIkZmlsdGVycyIsIiRmaWx0ZXJzQW5jaG9yZSIsImNyZWF0ZVRvZG9IdG1sIiwiaHRtbFRvZG8iLCJkaXYiLCJrZXlDb2RlIiwidmFsdWUiLCJ0b2RvTGlzdCIsIm5vbWJyZUVsZW1lbnRvIiwiZSIsInRvZG9FbGVtZW50IiwidG9kb0lkIiwiaSIsImVsZW1lbnQiLCJhY3Rpb24iLCJpdGVtQW5jaG9yZSIsInRvZG9JdGVtIiwiY29tcGxldGVkIl0sIm1hcHBpbmdzIjoiYUFJQSxjQUdBLFFBQ0Esb0JBR0EsWUFDQSxHQURBLENBRUEsSUFGQSxDQUdBLFVBSEEsRUFhQSxNQU5BLG1DQU1BLENBSEEsTUFHQSxVQUNBLENBeEJBLFNBaUZBLE1BckRBLE1BcURBLENBbERBLEtBa0RBLENBL0NBLG9CQUNBLFFBREEsRUFFQSwyQkFBMEMsYUFBMUMsQ0FBMEMsS0FBMUMsRUFFQSxDQTJDQSxDQXhDQSxnQkFDQSw4Q0FEQSxFQUVBLDRDQUF3RCxjQUF4RCxFQUZBLENBSUEsc0NBQWlELFFBQWpELEVBQ0EsQ0FtQ0EsQ0E1QkEsa0JBRUEsR0FEQSxHQUNBLEdBREEsTUFDQSxlQUNBLHFEQUNBLDBCQUdB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UixFQUlRQSxVQVBaZCxFLENBWUFDLDJCQUFtQyxXQUFPLENBQ3RDLEdBQU1jLEdBQVNMLFNBQWYsS0FEc0MsTUFZdENSLFVBQXdCLGtCQUFVVCxvQkFBVixVQUFVQSxDQUFsQ1MsRUFac0MsQ0FhdEMsR0FBTWMsR0FBY04sRUFBcEIsT0FDQU0sMkJBZHNDLFdBZ0JmbkIsRUFoQmUsY0FnQnRDLDJCQUEyQyxJQUFoQ29CLEdBQWdDLFFBQ3ZDQSw0QkFEdUMsQ0FFdkMsR0FBTUMsR0FBWUQscUJBQWxCLFdBQWtCQSxDQUFsQixDQUVBLFVBQ0ksb0JBRVFBLHlCQUZSLENBSUksTUFDSixxQkFFUUEseUJBRlIsQ0FJSSxNQUNKLFFBWEosQ0FjSCxDQWxDcUMsZ0NBQTFDaEIsRSxDQy9ETyxHQUFNTyxHQUFOLE1BRUhBLFNBQUosQ0FBc0JBLGUsRUFDbEJBLGdCQUF1Qix1QkFBdkJBLEUiLCJmaWxlIjoibWFpbi4zZTVjN2ExYTBkM2EzMDQ2ODcyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiIsImV4cG9ydCBjbGFzcyBUb2RvIHtcclxuICAgIC8vIHRhcmVhO1xyXG4gICAgLy8gaWQ7XHJcbiAgICAvLyBkb25lO1xyXG4gICAgLy8gY3JlYXRlZDtcclxuXHJcbiAgICBzdGF0aWMgZnJvbUpzb24oeyBpZCwgdGFyZWEsIGRvbmUsIGNyZWF0ZWQgfSkge1xyXG4gICAgICAgIGNvbnN0IHRlbXBUb2RvID0gbmV3IFRvZG8odGFyZWEpO1xyXG4gICAgICAgIHRlbXBUb2RvLmlkID0gaWQ7XHJcbiAgICAgICAgdGVtcFRvZG8uZG9uZSA9IGRvbmU7XHJcbiAgICAgICAgdGVtcFRvZG8uY3JlYXRlZCA9IGNyZWF0ZWQ7XHJcblxyXG4gICAgICAgIHJldHVybiB0ZW1wVG9kbztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0YXJlYSkge1xyXG4gICAgICAgIHRoaXMudGFyZWEgPSB0YXJlYTtcclxuICAgICAgICB0aGlzLmlkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVkID0gbmV3IERhdGUoKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBUb2RvIH0gZnJvbSAnLi90b2RvLmNsYXNzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUb2RvTGlzdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmxvYWRMb2NhbFN0b3JhZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRUb2RvKHRvZG8pIHtcclxuICAgICAgICB0aGlzLnRvZG9zLnB1c2godG9kbyk7XHJcbiAgICAgICAgdGhpcy5zYXZlTG9jYWxTdG9yYWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlVG9kbyhpZCkge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy50b2Rvcy5maW5kSW5kZXgoKHRvZG8pID0+IHRvZG8uaWQgPT09IGlkKTtcclxuICAgICAgICB0aGlzLnRvZG9zLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgdGhpcy5zYXZlTG9jYWxTdG9yYWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlRG9uZVRvZG8oaWQpIHtcclxuICAgICAgICBjb25zdCB0b2RvID0gdGhpcy50b2Rvcy5maW5kKChpdGVtKSA9PiBpdGVtLmlkID09PSBpZCk7XHJcbiAgICAgICAgdG9kby5kb25lID0gIXRvZG8uZG9uZTtcclxuICAgICAgICB0aGlzLnNhdmVMb2NhbFN0b3JhZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVDb21wbGV0ZWQoKSB7XHJcbiAgICAgICAgdGhpcy50b2RvcyA9IHRoaXMudG9kb3MuZmlsdGVyKChpdGVtKSA9PiAhaXRlbS5kb25lKTtcclxuICAgICAgICB0aGlzLnNhdmVMb2NhbFN0b3JhZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlTG9jYWxTdG9yYWdlKCkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2RvcycsIEpTT04uc3RyaW5naWZ5KHRoaXMudG9kb3MpKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkTG9jYWxTdG9yYWdlKCkge1xyXG4gICAgICAgIHRoaXMudG9kb3MgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9kb3MnKSA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RvZG9zJykpIDogW107XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRvZG9zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy50b2RvcyA9IHRoaXMudG9kb3MubWFwKChpdGVtKSA9PiBUb2RvLmZyb21Kc29uKGl0ZW0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVG9kbyB9IGZyb20gJy4vY2xhc3Nlcyc7XHJcbmltcG9ydCB7IHRvZG9MaXN0IH0gZnJvbSAnLi4vaW5kZXgnO1xyXG5cclxuY29uc3QgJHRvZG9MaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvZG8tbGlzdCcpO1xyXG5jb25zdCAkbmV3SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3LXRvZG8nKTtcclxuY29uc3QgJGNsZWFyQ29tcGxldGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNsZWFyLWNvbXBsZXRlZCcpO1xyXG5jb25zdCAkZmlsdGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXJzJyk7XHJcbmNvbnN0ICRmaWx0ZXJzQW5jaG9yZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5maWx0ZXJzIGEnKTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVUb2RvSHRtbCA9ICh0b2RvKSA9PiB7XHJcbiAgICBjb25zdCBodG1sVG9kbyA9IGBcclxuICAgIDxsaSBjbGFzcz1cIiR7dG9kby5kb25lID8gJ2NvbXBsZXRlZCcgOiAnJ31cIiBkYXRhLWlkPVwiJHt0b2RvLmlkfVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2aWV3XCI+XHJcbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cInRvZ2dsZVwiIHR5cGU9XCJjaGVja2JveFwiICR7dG9kby5kb25lID8gJ2NoZWNrZWQnIDogJyd9PlxyXG4gICAgICAgICAgICA8bGFiZWw+JHt0b2RvLnRhcmVhfTwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJkZXN0cm95XCI+PC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGlucHV0IGNsYXNzPVwiZWRpdFwiIHZhbHVlPVwiQ3JlYXRlIGEgVG9kb01WQyB0ZW1wbGF0ZVwiPlxyXG4gICAgPC9saT5gO1xyXG5cclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGl2LmlubmVySFRNTCA9IGh0bWxUb2RvO1xyXG5cclxuICAgICR0b2RvTGlzdC5hcHBlbmRDaGlsZChkaXYuZmlyc3RFbGVtZW50Q2hpbGQpO1xyXG59O1xyXG5cclxuLy8gZXZlbnRvc1xyXG5cclxuJG5ld0lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgICAga2V5Q29kZSxcclxuICAgICAgICB0YXJnZXQ6IHsgdmFsdWUgfSxcclxuICAgIH0gPSBldmVudDtcclxuXHJcbiAgICBpZiAoa2V5Q29kZSA9PT0gMTMgJiYgdmFsdWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IHRvZG8gPSBuZXcgVG9kbyh2YWx1ZSk7XHJcbiAgICAgICAgdG9kb0xpc3QuYWRkVG9kbyh0b2RvKTtcclxuICAgICAgICBjcmVhdGVUb2RvSHRtbCh0b2RvKTtcclxuICAgICAgICAkbmV3SW5wdXQudmFsdWUgPSAnJztcclxuICAgIH1cclxufSk7XHJcblxyXG4kdG9kb0xpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgY29uc3Qgbm9tYnJlRWxlbWVudG8gPSBlLnRhcmdldC5sb2NhbE5hbWU7XHJcbiAgICBjb25zdCB0b2RvRWxlbWVudCA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgIGNvbnN0IHRvZG9JZCA9IE51bWJlcih0b2RvRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSk7XHJcblxyXG4gICAgaWYgKG5vbWJyZUVsZW1lbnRvID09PSAnaW5wdXQnKSB7XHJcbiAgICAgICAgdG9kb0xpc3QuY2hhbmdlRG9uZVRvZG8odG9kb0lkKTtcclxuICAgICAgICB0b2RvRWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdjb21wbGV0ZWQnKTtcclxuICAgIH0gZWxzZSBpZiAobm9tYnJlRWxlbWVudG8gPT09ICdidXR0b24nKSB7XHJcbiAgICAgICAgdG9kb0xpc3QucmVtb3ZlVG9kbyh0b2RvSWQpO1xyXG4gICAgICAgIHRvZG9FbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbiRjbGVhckNvbXBsZXRlZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIHRvZG9MaXN0LnJlbW92ZUNvbXBsZXRlZCgpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAkdG9kb0xpc3QuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gJHRvZG9MaXN0LmNoaWxkcmVuW2ldO1xyXG5cclxuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2NvbXBsZXRlZCcpKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuXHJcbiRmaWx0ZXJzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgIGNvbnN0IGFjdGlvbiA9IGUudGFyZ2V0LnRleHQ7XHJcblxyXG4gICAgaWYgKCFhY3Rpb24pIHJldHVybjtcclxuXHJcbiAgICAvLyBmb3IgKGNvbnN0IGl0ZW1BbmNob3JlIG9mICRmaWx0ZXJzQW5jaG9yZSkge1xyXG4gICAgLy8gICAgIGl0ZW1BbmNob3JlLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XHJcbiAgICAvLyAgICAgaWYgKGFjdGlvbiA9PT0gaXRlbUFuY2hvcmUudGV4dCkge1xyXG4gICAgLy8gICAgICAgICBpdGVtQW5jaG9yZS5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbiAgICAkZmlsdGVyc0FuY2hvcmUuZm9yRWFjaCgoaXRlbSkgPT4gaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpKTtcclxuICAgIGNvbnN0IGl0ZW1BbmNob3JlID0gZS50YXJnZXQ7XHJcbiAgICBpdGVtQW5jaG9yZS5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG5cclxuICAgIGZvciAoY29uc3QgdG9kb0l0ZW0gb2YgJHRvZG9MaXN0LmNoaWxkcmVuKSB7XHJcbiAgICAgICAgdG9kb0l0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgY29uc3QgY29tcGxldGVkID0gdG9kb0l0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdjb21wbGV0ZWQnKTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgY2FzZSAnUGVuZGllbnRlcyc6XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9kb0l0ZW0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnQ29tcGxldGFkb3MnOlxyXG4gICAgICAgICAgICAgICAgaWYgKCFjb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2RvSXRlbS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuIiwiLy8gaW1wb3J0IHsgc2FsdWRhciB9IGZyb20gJy4vanMvc2FsdWRhcic7XHJcbmltcG9ydCAnLi9zdHlsZXMuY3NzJztcclxuaW1wb3J0IHsgVG9kb0xpc3QgfSBmcm9tICcuL2pzL2NsYXNzZXMnO1xyXG5pbXBvcnQgeyBjcmVhdGVUb2RvSHRtbCB9IGZyb20gJy4vanMvY29tcG9uZW50cyc7XHJcblxyXG5leHBvcnQgY29uc3QgdG9kb0xpc3QgPSBuZXcgVG9kb0xpc3QoKTtcclxuXHJcbmlmICh0b2RvTGlzdC50b2RvcyAmJiB0b2RvTGlzdC50b2Rvcy5sZW5ndGggPiAwKSB7XHJcbiAgICB0b2RvTGlzdC50b2Rvcy5mb3JFYWNoKCh0b2RvKSA9PiBjcmVhdGVUb2RvSHRtbCh0b2RvKSk7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==